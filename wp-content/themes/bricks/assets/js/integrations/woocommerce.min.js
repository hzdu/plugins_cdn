document.addEventListener('DOMContentLoaded', function (event) {
	bricksWooProductsFilter()
	bricksWooMiniModals()
	bricksWooQuantityTriggers()
	bricksWooMiniCartHideDetailsClickOutside()
	bricksWooAjaxAddToCartInit()

	// Re-init quantity triggers (after cart page remove click, etc.)
	jQuery(document.body).on('updated_cart_totals', function () {
		bricksWooQuantityTriggers()
		bricksLazyLoad()
	})
})

/**
 * Mini cart: Refresh cart fragments in builder
 */
function bricksWooRefreshCartFragments() {
	if (typeof woocommerce_params == 'undefined') {
		return
	}

	// TODO: PayPal SDK generates console error in builder when mini cart is used in header

	var url = woocommerce_params.wc_ajax_url
	url = url.replace('%%endpoint%%', 'get_refreshed_fragments')

	jQuery.post(url, function (data, status) {
		if (data.fragments) {
			bricksWooReplaceFragments(data.fragments)
		}

		jQuery('body').trigger('wc_fragments_refreshed')
	})
}

function bricksWooReplaceFragments(fragments) {
	if (fragments) {
		jQuery.each(fragments, function (key, value) {
			var fragment = jQuery(key)

			if (fragment) {
				fragment.replaceWith(value)
			}
		})
	}
}

/**
 * Hide mini cart on click outside of mini cart details
 *
 * @since 1.3.1
 */
function bricksWooMiniCartHideDetailsClickOutside() {
	var miniCartDetails = bricksQuerySelectorAll(document, '.cart-detail')

	if (miniCartDetails) {
		miniCartDetails.forEach(function (element) {
			document.addEventListener('click', function (event) {
				if (
					!event.target.closest('.mini-cart-link') &&
					element.classList.contains('active') &&
					!event.target.closest('.cart-detail')
				) {
					element.classList.remove('active')

					var miniCartEl = element.closest('.brxe-woocommerce-mini-cart')

					if (miniCartEl) {
						miniCartEl.classList.toggle('show-cart-details')
					}
				}
			})
		})
	}
}

/**
 * Used to open/close mini cart (and account modal)
 */
function bricksWooMiniModalsToggle(event) {
	event.preventDefault()

	var target = event.currentTarget
	var modalString = target.getAttribute('data-toggle-target')

	if (!modalString) {
		return
	}

	// Remove class from other modals
	var toggles = document.querySelectorAll('.bricks-woo-toggle')

	toggles.forEach(function (toggle) {
		var thisModal = toggle.getAttribute('data-toggle-target')

		if (thisModal !== modalString) {
			var elModal = toggle.querySelector(thisModal)

			if (elModal !== null && elModal.classList.contains('active')) {
				elModal.classList.remove('active')

				var miniCartEl = toggle.closest('.brxe-woocommerce-mini-cart')

				if (miniCartEl) {
					miniCartEl.classList.remove('show-cart-details')
				}
			}
		}
	})

	// Toggle main modal
	var modalEl = document.querySelector(modalString)

	if (null !== modalEl) {
		modalEl.classList.toggle('active')

		var miniCartEl = modalEl.closest('.brxe-woocommerce-mini-cart')

		if (miniCartEl) {
			miniCartEl.classList.toggle('show-cart-details')
		}
	}
}

/**
 * Re-init WooCommerce product gallery in builder
 */
function bricksWooProductGallery() {
	if (bricksIsFrontend || typeof jQuery(this).wc_product_gallery === 'undefined') {
		return
	}

	jQuery('.woocommerce-product-gallery').each(function () {
		jQuery(this).trigger('wc-product-gallery-before-init', [this, window.wc_single_product_params])
		jQuery(this).wc_product_gallery(window.wc_single_product_params)
		jQuery(this).trigger('wc-product-gallery-after-init', [this, window.wc_single_product_params])
	})
}

/**
 * Cart quantity up/down
 */
function bricksWooQuantityTriggers() {
	var quantityButtons = bricksQuerySelectorAll(document, 'form .quantity .action')

	quantityButtons.forEach(function (button) {
		button.addEventListener('click', function (e) {
			e.preventDefault()

			// Only update cart if quantity input is not readonly (@since 1.7)
			var quantityInput = e.target.closest('.quantity').querySelector('.qty:not([readonly])')

			if (!quantityInput) {
				return
			}

			var updateCartButton = document.querySelector('button[name="update_cart"]')

			if (updateCartButton) {
				updateCartButton.removeAttribute('disabled')
				updateCartButton.setAttribute('aria-disabled', 'false')
			}

			if (e.target.classList.contains('plus')) {
				quantityInput.stepUp()
			} else if (e.target.classList.contains('minus')) {
				quantityInput.stepDown()
			}

			// Trigger change event for product quantity input (@since 1.7)
			const quantityInputEvent = new Event('change', { bubbles: true })
			quantityInput.dispatchEvent(quantityInputEvent)
		})
	})
}

function bricksWooProductsFilter() {
	var filters = bricksQuerySelectorAll(document, '.brxe-woocommerce-products-filter .filter-item')

	filters.forEach(function (filter) {
		function triggerFormSubmit(event) {
			event.target.closest('form').submit()
		}

		function toggleFilter(event) {
			var parentEl = event.target.closest('.filter-item')
			parentEl.classList.toggle('open')
		}

		var dropdowns = bricksQuerySelectorAll(filter, '.dropdown')
		dropdowns.forEach(function (dropdown) {
			dropdown.addEventListener('change', triggerFormSubmit)
		})

		var inputs = bricksQuerySelectorAll(filter, 'input[type="radio"], input[type="checkbox"]')
		inputs.forEach(function (input) {
			input.addEventListener('change', triggerFormSubmit)
			input.addEventListener('click', triggerFormSubmit)
		})

		var sliders = bricksQuerySelectorAll(filter, '.double-slider-wrap')
		sliders.forEach(function (slider) {
			bricksWooProductsFilterInitSlider(slider)
		})

		var toggles = bricksQuerySelectorAll(filter, '.title')
		toggles.forEach(function (toggle) {
			toggle.onclick = toggleFilter
		})
	})
}

/**
 * Init any WooCommerce mini modals (mini-cart)
 */
function bricksWooMiniModals() {
	var toggles = document.querySelectorAll('.bricks-woo-toggle')
	toggles.forEach(function (toggle) {
		toggle.addEventListener('click', bricksWooMiniModalsToggle)

		// @since 1.6.1 - Open on woo added_to_cart
		if (toggle.hasAttribute('data-open-on-add-to-cart')) {
			jQuery(document.body).on('added_to_cart', function (event, fragments, cart_hash, $button) {
				toggle.click()
			})
		}
	})
}

/**
 * Double Range Slider (to set min & max values)
 */
function bricksWooProductsFilterInitSlider(slider) {
	var lowerSlider = slider.querySelector('input.lower')
	var upperSlider = slider.querySelector('input.upper')

	lowerSlider.oninput = bricksWooProductsFilterUpdateSliderValue
	upperSlider.oninput = bricksWooProductsFilterUpdateSliderValue

	var lowerVal = parseInt(lowerSlider.value)
	var upperVal = parseInt(upperSlider.value)

	bricksWooProductsFilterRenderSliderValues(lowerSlider.parentNode, lowerVal, upperVal)

	// Submit form after range input change (= mouseup)
	lowerSlider.addEventListener('change', function () {
		slider.closest('form').submit()
	})

	upperSlider.addEventListener('change', function () {
		slider.closest('form').submit()
	})
}

function bricksWooProductsFilterUpdateSliderValue(event) {
	var parentEl = event.target.parentNode
	var lowerSlider = parentEl.querySelector('input.lower')
	var upperSlider = parentEl.querySelector('input.upper')
	var lowerVal = parseInt(lowerSlider.value)
	var upperVal = parseInt(upperSlider.value)

	if (upperVal < lowerVal + 4) {
		lowerSlider.value = upperVal - 4
		upperSlider.value = lowerVal + 4

		if (lowerVal == lowerSlider.min) {
			upperSlider.value = 4
		}
		if (upperVal == upperSlider.max) {
			lowerSlider.value = parseInt(upperSlider.max) - 4
		}
	}

	bricksWooProductsFilterRenderSliderValues(parentEl, lowerVal, upperVal)
}

function bricksWooProductsFilterRenderSliderValues(parentEl, lowerVal, upperVal) {
	var currency = parentEl.getAttribute('data-currency')
	var labelLower = parentEl.querySelector('label.lower')
	var labelUpper = parentEl.querySelector('label.upper')
	var valueLower = parentEl.querySelector('.value.lower')
	var valueUpper = parentEl.querySelector('.value.upper')

	valueLower.innerText = labelLower.innerText + ': ' + currency + lowerVal
	valueUpper.innerText = labelUpper.innerText + ': ' + currency + upperVal
}

/**
 * Init AJAX add to cart logic
 *
 * @since 1.6.1
 */
function bricksWooAjaxAddToCartInit(selector) {
	if (!window.bricksWooCommerce.ajaxAddToCartEnabled) {
		return
	}

	let container = document

	if (selector && document.querySelector(selector)) {
		container = document.querySelector(selector)
	}

	// Only targeting single product page's add to cart button, not the shop loop buttons
	const addToCartButtons = bricksQuerySelectorAll(container, '.single_add_to_cart_button')

	addToCartButtons.forEach(function (addToCartButton) {
		// Add event listeners for clicking add to cart
		addToCartButton.addEventListener('click', function (event) {
			event.preventDefault()
			if (addToCartButton.classList.contains('disabled')) {
				return
			}

			const form = addToCartButton.closest('form.cart')
			bricksWooAddToCart(form)
		})
	})

	// Function to get Ajax Button Settings, returns default setting if not set
	const getAjaxButtonSettings = function (button) {
		let ajaxButtonSettingsObj = {
			addingHTML: bricksWooCommerce.ajaxAddingText,
			addedHTML: bricksWooCommerce.ajaxAddedText
		}
		if (button.closest('.brxe-product-add-to-cart')) {
			ajaxButtonSettingsObj =
				button.closest('.brxe-product-add-to-cart')?.getAttribute('data-bricks-ajax-add-to-cart') ||
				ajaxButtonSettingsObj
		}
		return typeof ajaxButtonSettingsObj === 'string'
			? JSON.parse(ajaxButtonSettingsObj)
			: ajaxButtonSettingsObj
	}

	// Change button text on woo event adding_to_cart, included shop loop buttons
	jQuery('body').on('adding_to_cart', function (event, $button, data) {
		$button[0].setAttribute('disabled', 'disabled')
		$button[0].classList.add('disabled', 'bricks-cart-adding')

		// Get Ajax Button Settings
		const ajaxButtonSettings = getAjaxButtonSettings($button[0])
		if (ajaxButtonSettings && ajaxButtonSettings.addingHTML) {
			$button[0].innerHTML = ajaxButtonSettings.addingHTML
		}
	})

	// Change button text on woo event added_to_cart, included shop loop buttons
	jQuery('body').on('added_to_cart', function (event, fragments, cartHash, $button) {
		$button[0].removeAttribute('disabled')
		$button[0].classList.add('bricks-cart-added')
		$button[0].classList.remove('disabled', 'bricks-cart-adding')

		// Get Ajax Button Settings
		const ajaxButtonSettings = getAjaxButtonSettings($button[0])
		if (ajaxButtonSettings && ajaxButtonSettings.addedHTML) {
			$button.html(ajaxButtonSettings.addedHTML)
		}
	})
}

/**
 * AJAX add to cart for single product pages
 *
 * @since 1.6.1
 */
function bricksWooAddToCart(form) {
	if (typeof woocommerce_params == 'undefined') {
		return
	}

	const addToCartButton = form.querySelector('.single_add_to_cart_button')
	const formData = new FormData(form)
	const data = {}

	// Populate data for simple products
	data.product_id = addToCartButton.value
	data.quantity = formData.get('quantity')
	data.product_type = 'simple'

	// Populate data for variable products
	if (form.classList.contains('variations_form')) {
		data.product_id = formData.get('product_id')
		data.quantity = formData.get('quantity')
		data.variation_id = formData.get('variation_id')
		data.product_type = 'variable'
		// Populate attributes array with attribute names and values
		const attributes = {}
		for (const pair of formData.entries()) {
			if (pair[0].indexOf('attribute_') > -1) {
				attributes[pair[0]] = pair[1]
			}
		}
		data.variation = attributes
	}

	// Populate data for grouped products
	if (form.classList.contains('grouped_form')) {
		// For grouped products, product_id is the ID of the parent. It wouldn't be added into cart
		data.product_id = formData.get('add-to-cart')

		// Populate products array with product IDs and quantities
		const products = {}
		for (const pair of formData.entries()) {
			if (pair[0].indexOf('quantity') > -1 && pair[1] > 0) {
				const product_id = pair[0].replace('quantity[', '').replace(']', '')
				products[product_id] = pair[1]
			}
		}
		data.products = products
		data.product_type = 'grouped'
	}

	if (data.product_type === 'grouped') {
		// If product type is grouped and data.products is empty, don't add to cart
		if (Object.keys(data.products).length === 0) {
			return
		}
	}

	// Trigger woo adding_to_cart event
	jQuery('body').trigger('adding_to_cart', [jQuery(addToCartButton), data])

	const url = woocommerce_params.wc_ajax_url
		.toString()
		.replace('%%endpoint%%', 'bricks_add_to_cart')

	// Use jQuery to submit add to cart
	jQuery.ajax({
		type: 'POST',
		url: url,
		data: data,
		dataType: 'json',
		success: function (response) {
			// Redirect to product page if an error occurs
			if (response.error && response.product_url) {
				window.location = response.product_url
				return
			}

			// Add to cart successfully
			// Redirect to cart option from woo settings if enabled
			if (
				typeof wc_add_to_cart_params !== 'undefined' &&
				wc_add_to_cart_params.cart_redirect_after_add === 'yes' &&
				wc_add_to_cart_params.cart_url
			) {
				window.location = wc_add_to_cart_params.cart_url
				return
			}

			// Replace fragments and trigger woo event
			if (response.fragments) {
				bricksWooReplaceFragments(response.fragments)
				jQuery('body').trigger('wc_fragments_refreshed')
			}

			// Trigger woo added_to_cart event
			jQuery('body').trigger('added_to_cart', [
				response.fragments,
				response.cart_hash,
				jQuery(addToCartButton)
			])
		},
		error: function (response) {
			// Redirect to product page if an error occurs
			if (response.error && response.product_url) {
				window.location = response.product_url
			}
		},
		complete: function (response) {}
	})
}
