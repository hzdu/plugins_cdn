{"version":3,"file":"validate.min.js","mappings":"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","sources":["webpack://automatewoo/./admin/assets/js/validate.js"],"sourcesContent":["// Register eslint ignored glabals - to be revisited.\n// https://github.com/woocommerce/automatewoo/issues/1212\n/* global _, automatewooValidateLocalizedErrorMessages, AW, tinyMCE */\n/**\n * Workflow field validator\n */\n\n( function ( $, localizedErrorMessages ) {\n\tconst self = {\n\t\terrorMessages: {},\n\n\t\tinit() {\n\t\t\tsetInterval( function () {\n\t\t\t\tif ( typeof tinyMCE !== 'undefined' ) {\n\t\t\t\t\ttinyMCE.triggerSave();\n\t\t\t\t}\n\n\t\t\t\t$( '.automatewoo-field-wrap textarea.wp-editor-area' ).each(\n\t\t\t\t\tfunction () {\n\t\t\t\t\t\t$( this ).attr(\n\t\t\t\t\t\t\t'data-automatewoo-validate',\n\t\t\t\t\t\t\t'variables'\n\t\t\t\t\t\t);\n\t\t\t\t\t\tself.validateField( $( this ) );\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}, 2000 );\n\n\t\t\t$( document.body ).on(\n\t\t\t\t'keyup blur change',\n\t\t\t\t'[data-automatewoo-validate]',\n\t\t\t\tfunction ( event ) {\n\t\t\t\t\tself.validateField( $( event.target ) );\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tself.validateAllFields();\n\t\t},\n\n\t\tvalidateAllFields() {\n\t\t\t$( '[data-automatewoo-validate]' ).each( function () {\n\t\t\t\tself.validateField( $( this ) );\n\t\t\t} );\n\t\t},\n\n\t\tvalidateField( $field ) {\n\t\t\tif ( ! AW.workflow ) return;\n\n\t\t\tconst errors = [];\n\t\t\tconst text = $field.val();\n\n\t\t\tself.clearFieldErrors( $field );\n\n\t\t\tconst usedVariables = AW.Validate.getVariablesFromText( text );\n\n\t\t\tif ( self.fieldSupports( 'variables', $field ) ) {\n\t\t\t\tconst trigger = AW.workflow.get( 'trigger' );\n\n\t\t\t\t_.each( usedVariables, function ( variable ) {\n\t\t\t\t\tconst valid = self.isVariableValidForTrigger(\n\t\t\t\t\t\tvariable,\n\t\t\t\t\t\ttrigger\n\t\t\t\t\t);\n\n\t\t\t\t\tif ( valid !== true ) {\n\t\t\t\t\t\terrors.push(\n\t\t\t\t\t\t\tself.getErrorMessage(\n\t\t\t\t\t\t\t\tvalid,\n\t\t\t\t\t\t\t\tself.getVariableWithoutParams( variable )\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t} else if ( usedVariables ) {\n\t\t\t\terrors.push( self.getErrorMessage( 'noVariablesSupport' ) );\n\t\t\t}\n\n\t\t\tif ( errors.length ) {\n\t\t\t\tself.setFieldErrors( $field, errors );\n\t\t\t}\n\t\t},\n\n\t\tsetFieldErrors( $field, errors ) {\n\t\t\t$field.addClass( 'automatewoo-field--invalid' );\n\t\t\tconst $wrap = $field.parents( '.automatewoo-field-wrap:first' );\n\t\t\t$wrap.append( '<div class=\"automatewoo-field-errors\"></div>' );\n\t\t\tconst $errors = $wrap.find( '.automatewoo-field-errors' );\n\n\t\t\tif ( $field.is( '.wp-editor-area' ) ) {\n\t\t\t\t$wrap\n\t\t\t\t\t.find( '.wp-editor-container' )\n\t\t\t\t\t.addClass( 'automatewoo-field--invalid' );\n\t\t\t}\n\n\t\t\t_.each( errors, function ( error ) {\n\t\t\t\t$errors.append(\n\t\t\t\t\t'<div class=\"automatewoo-field-errors__error\">' +\n\t\t\t\t\t\terror +\n\t\t\t\t\t\t'</div>'\n\t\t\t\t);\n\t\t\t} );\n\t\t},\n\n\t\tclearFieldErrors( $field ) {\n\t\t\tconst $wrap = $field.parents( '.automatewoo-field-wrap:first' );\n\t\t\t$field.removeClass( 'automatewoo-field--invalid' );\n\n\t\t\tif ( $field.is( '.wp-editor-area' ) ) {\n\t\t\t\t$wrap\n\t\t\t\t\t.find( '.wp-editor-container' )\n\t\t\t\t\t.removeClass( 'automatewoo-field--invalid' );\n\t\t\t}\n\n\t\t\t$wrap.find( '.automatewoo-field-errors' ).remove();\n\t\t},\n\n\t\tfieldSupports( option, $field ) {\n\t\t\tconst options = $field.data( 'automatewoo-validate' ).split( ' ' );\n\t\t\treturn _.indexOf( options, option ) !== -1;\n\t\t},\n\n\t\t/**\n\t\t * @param {string} variable\n\t\t * @param {Object} trigger  Workflow trigger.\n\t\t * @return {boolean|string} `true` if valid, validation error otherwise.\n\t\t */\n\t\tisVariableValidForTrigger( variable, trigger ) {\n\t\t\tconst dataType = self.getDataTypeFromVariable( variable );\n\n\t\t\tif (\n\t\t\t\tdataType &&\n\t\t\t\t_.indexOf( trigger.supplied_data_items, dataType ) === -1\n\t\t\t) {\n\t\t\t\treturn 'invalidDataType';\n\t\t\t}\n\n\t\t\tconst dataField = self.getDataFieldFromVariable( variable );\n\t\t\tconst variables = AW.workflow.get( 'variables' );\n\n\t\t\tif ( variables && variables[ dataType ] ) {\n\t\t\t\tif ( variables[ dataType ].indexOf( dataField ) === -1 ) {\n\t\t\t\t\treturn 'invalidVariable';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\t\t/**\n\t\t * Extract variables from a text field\n\t\t *\n\t\t * @param {string} text\n\t\t * @return {Array<string>|false} Array of variables, or `false` if none.\n\t\t */\n\t\tgetVariablesFromText( text ) {\n\t\t\tconst variables = text.match( /{{(.*?)}}/g );\n\n\t\t\tif ( ! variables ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t_.each( variables, function ( variable, i ) {\n\t\t\t\tvariables[ i ] = variable.replace( /{|}/g, '' ).trim();\n\t\t\t} );\n\n\t\t\treturn variables;\n\t\t},\n\n\t\tgetVariableWithoutParams( variable ) {\n\t\t\treturn variable.replace( /(\\|.*)/, '' );\n\t\t},\n\n\t\t/**\n\t\t * @param {string} variable\n\t\t */\n\t\tgetDataTypeFromVariable( variable ) {\n\t\t\tif ( variable.indexOf( '.' ) === -1 ) return false;\n\t\t\treturn variable.replace( /(\\..*)/, '' );\n\t\t},\n\n\t\t/**\n\t\t * @param {string} variable\n\t\t */\n\t\tgetDataFieldFromVariable( variable ) {\n\t\t\tvariable = self.getVariableWithoutParams( variable );\n\t\t\tconst dotpos = variable.indexOf( '.' );\n\t\t\tif ( dotpos === -1 ) return false;\n\t\t\treturn variable.substring( dotpos + 1 ).trim();\n\t\t},\n\n\t\tgetErrorMessage( error, replace ) {\n\t\t\tif ( ! self.errorMessages[ error ] ) {\n\t\t\t\treturn 'Unknown error, please try refreshing your browser.';\n\t\t\t}\n\n\t\t\tlet message = self.errorMessages[ error ];\n\n\t\t\tif ( typeof replace === 'string' ) {\n\t\t\t\tmessage = message.replace( '%s', replace );\n\t\t\t}\n\n\t\t\treturn message;\n\t\t},\n\t};\n\n\tAW.Validate = self;\n\tself.errorMessages = localizedErrorMessages;\n} )( jQuery, automatewooValidateLocalizedErrorMessages );\n"],"names":["$","localizedErrorMessages","self","errorMessages","init","setInterval","tinyMCE","triggerSave","each","this","attr","validateField","document","body","on","event","target","validateAllFields","$field","AW","workflow","errors","text","val","clearFieldErrors","usedVariables","Validate","getVariablesFromText","fieldSupports","trigger","get","_","variable","valid","isVariableValidForTrigger","push","getErrorMessage","getVariableWithoutParams","length","setFieldErrors","addClass","$wrap","parents","append","$errors","find","is","error","removeClass","remove","option","options","data","split","indexOf","dataType","getDataTypeFromVariable","supplied_data_items","dataField","getDataFieldFromVariable","variables","match","i","replace","trim","dotpos","substring","message","jQuery","automatewooValidateLocalizedErrorMessages"],"sourceRoot":""}